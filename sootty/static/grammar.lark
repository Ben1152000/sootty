%import common.WS
%ignore WS
%import common.LETTER -> LETTER
%import common.DIGIT -> DIGIT
%import common.NUMBER -> NUM

start : lexp
NAME: ("_"|LETTER) ("_"|LETTER|DIGIT)* ("." ("_"|LETTER|DIGIT)+)*

AND : "&"
OR : "|"
XOR : "^"
EQ : "=="
NEQ : "!="
GT : ">"
GEQ : ">="
LT : "<"
LEQ : "<="
SL : "<<"
SR : ">>"
ADD : "+"
SUB : "-"
MOD : "%"
CONST : "const"
TIME : "time"
NOT : "!"
NEG : "-"
FROM : "from"
AFTER : "after"
UNTIL : "until"
BEFORE : "before"
NEXT : "next"
PREV : "prev"
ACC : "acc"

lop : AND | OR | XOR
lexp : rexp | lexp lop rexp

rop : EQ | NEQ | GT | GEQ | LT | LEQ
rexp : sexp | rexp rop sexp

sop : SL | SR
sexp : aexp | sexp sop aexp

aop : ADD | SUB | MOD
aexp : wire | aexp aop wire

uop : NOT | NEG
type : CONST | TIME
top : FROM | AFTER | UNTIL | BEFORE
tsop : NEXT | PREV
wire : NAME | "(" lexp ")" | uop wire | type NUM 
    | top wire | tsop wire | NUM tsop wire | ACC wire